local super = Class("PixelBuffer", Component).getSuperclass()PixelBuffer.nameCounter = 0function PixelBuffer:init()	super.init(self)	self.imagesize = 64	self.pixels = getElementData(getElementByID("twitter"), "pixels")	self.syncHandler = function  ( dataName )		if dataName == "pixels" then			self.pixels = getElementData(source, "pixels")		end		if dataName == "statuses" then			self.statuses = getElementData(source, "statuses")			if(self.statuses) then				for k, status in pairs(self.statuses) do					for x = 1, self.imagesize do						for y = 1, self.imagesize do							--self:addPixel(x, y, status.user.profile_image[tostring(y*self.imagesize+x-1)])						end					end					break				end			end		end	end	addEventHandler ( "onClientElementDataChange", root, self.syncHandler)	--self.pixels = {}	self.actionListener = nil	self:addMouseListener(self)	self:addMouseMotionListener({		mouseMoved = function(e)			self:mouseMoved(e)		end	})	self.brushColor = tocolor(0, 255, 0, 255)	self:setBackground(tocolor(255, 255, 255, 223))	self:setForeground(tocolor(0, 0, 0, 255))--[[  	local pattern =  	{	    "    ........    ",	    "   ..........   ",	    "  ...xx..xx...  ",	    "  ............  ",	    "   ...oooo...   ",	    "*   ........    ",	    "*oooooooooooooo*",	    "      oooo     *",	    "      oooo      ",	    "      xxxx      ",	    "      xxxx      ",	    "     xx  xx     ",	    "    xx    xx    ",	    "   xx      xx   ",	    "   **      **   ",	    "  ***      ***  "	}	-- Gera uma imagem apartir do pattern.  	for x = 1, 16 do    	for y = 1, 16 do			local color = tocolor(0,0,0)			local char = string.char(string.byte(pattern[y],x))      		if( char == '.') then color = tocolor(255,255,0)			elseif( char == 'o') then color = tocolor(255,0,0)			elseif( char == 'x') then color = tocolor(0,255,0)			elseif( char == '*') then color = tocolor(255,0,255)			else color = tocolor(0,0,0)			end      		self:addPixel(x, y, color)    	end  	end	self.statuses = getElementData(getElementByID ("twitter"), "statuses")	if(self.statuses) then		for k, status in pairs(self.statuses) do			for x = 1, self.imagesize do				for y = 1, self.imagesize do					self:addPixel(x, y, status.user.profile_image[tostring(y*self.imagesize+x-1)])				end			end			break		end	end]]	return selfendfunction PixelBuffer:setBuffer(buffer,w,h)	if(buffer) then		for x = 1, w-1 do			for y = 1, h do				self:addPixel(x, y, buffer[tostring(y*w+x-1)])			end		end	else		self:clear()	endendfunction PixelBuffer:addPixel(x, y, color)	if x < 0 or x >= 256 or y < 0 or y >= 256 then		return	end	self.pixels[y*256+x] = colorendfunction PixelBuffer:removePixel(x,y)	for addy = -4,4 do		for addx = -4,4 do			local thisx,thisy = x+addx,y+addy			if thisx >= 0 and thisx < 256 and thisy >= 0 and thisy < 256 then				self.pixels[thisy*256+thisx] = nil			end		end	endendfunction PixelBuffer:clear()	self.pixels = {}endfunction PixelBuffer:setActionCommand(command)    self.actionCommand = commandendfunction PixelBuffer:getActionCommand()    return self.actionCommandendfunction PixelBuffer:addActionListener(l)	if (not l) then		return	end	self.actionListener = l	--self.actionListener = EventMulticaster.add(self.actionListener, l)	--self.newEventsOnly = trueendfunction PixelBuffer:removeActionListener(l)	if (not l) then		return	end	self.actionListener = nil	--self.actionListener = EventMulticaster.remove(actionListener, l)endfunction PixelBuffer:addNotify()endfunction PixelBuffer:removeNotify()endfunction PixelBuffer:paint(g)	local x, y = self:getLocationOnScreen()	local w = self.width	local h = self.height	g:drawSetColor( self:getBackground() );	g:drawFilledRect(x,   y,   w, 1);	g:drawFilledRect(x+w, y,   1, h);	g:drawFilledRect(x,   y,   1, h);	g:drawFilledRect(x,   y+h, w, 1);	local color = self:getForeground()	if(self:isFocusOwner()) then		color = tocolor(0,0,0,200)	end	g:drawSetColor(color);	g:drawFilledRect(x + 1, y + 1, w - 1, h - 1)	for coord,issq in pairs(self.pixels) do		local coordx = coord%self.imagesize		local coordy = math.floor(coord/self.imagesize)		g:drawSetColor(self.pixels[coord]);		g:drawFilledRect(x+coordx,y+coordy,1,1)	endendfunction PixelBuffer:processEvent(e)	if (instanceOf(e, ActionEvent)) then		self:processActionEvent(e)		return	end	super.processEvent(self, e);endfunction PixelBuffer:processActionEvent(e)	local listener = self.actionListener	if (listener ~= nil) then		listener.actionPerformed(e)	endendfunction PixelBuffer:mouseClicked(e)endfunction PixelBuffer:mousePressed(e)	self:processEvent(ActionEvent.new(self,ActionEvent.ACTION_PERFORMED,"ACTION_PERFORMED",0,0))	if(e.button == MouseEvent.BUTTON1) then		self.painting = true	end	if(e.button == MouseEvent.BUTTON2) then		self.erasing = true	end	if(e.button == MouseEvent.BUTTON3) then		self.brushColor = tocolor(math.random(255), math.random(255), math.random(255), 255)	endendfunction PixelBuffer:mouseReleased(e)	if(e.button == MouseEvent.BUTTON1) then		self.painting = false		self:sync()	end	if(e.button == MouseEvent.BUTTON2) then		self.erasing = false		self:sync()	endendfunction PixelBuffer:mouseEntered(e)	--self:setBackground(tocolor(255, 255, 255, 223))	--self:setForeground(tocolor(0, 0, 0, 255))endfunction PixelBuffer:mouseExited(e)	--self:setBackground(tocolor(255, 255, 255, 223))	--self:setForeground(tocolor(0, 0, 0, 255))endfunction PixelBuffer:sync()	setElementData(getElementByID ("hudServer"), "pixels", self.pixels)endfunction PixelBuffer:mouseMoved(e)	if self.storedX then		local dist_x, dist_y = e.x-self.storedX, e.y-self.storedY		local longest_dist		if math.abs(dist_x) > math.abs(dist_y) then longest_dist = dist_x else longest_dist = dist_y end		longest_dist = math.abs(longest_dist)		if longest_dist ~= 0 then			for pos_in_line = 1,longest_dist do				local pos_x = math.floor(self.storedX+dist_x*pos_in_line/longest_dist)				local pos_y = math.floor(self.storedY+dist_y*pos_in_line/longest_dist)				if self.painting then					self:addPixel(pos_x,pos_y,self.brushColor)				elseif self.erasing then					self:removePixel(pos_x,pos_y)				end			end		else			if self.painting then				self:addPixel(e.x,e.y,tocolor(0, 255, 0, 255))			elseif self.erasing then				self:removePixel(e.x,e.y)			end		end	end	self.storedX, self.storedY = e.x, e.yend