local super = Class("Label", Component).getSuperclass()Label.LEFT 		= 0Label.CENTER 	= 1Label.RIGHT     = 2function Label:init(text)	super.init(self)	--@Attributes	self.font = "default-bold"	self.scale = 1	self.outlineSize = 0	self.colorCoded = true	self.parts = {}	self.fx = 0	self.fy = 0	self.textClean = ""	self.lineCount = 0		self:setText(text)	return selfendfunction Label:addNotify()	self:repaint()endfunction Label:getAlignment()	return self.alignment;endfunction Label:setAlignment(alignment)	if(alignment == Label.LEFT or alignment == Label.CENTER or alignment == Label.RIGHT) then	    self.alignment = alignment	    return	end	outputDebugString("improper alignment: " .. alignment)endfunction Label:getText()	return self.textendfunction Label:setText(text)	local oldText = self.text	self.text = text	self:firePropertyChange("text", oldText, text);		self.parts = {}	--[[	if(self.text) then		local curX, curY = 0, 0		local color = false --self:getForeground()		local colorpos = 1		local nextcolorpos		while colorpos < text:len()+1 do			local r, g, b = text:sub(colorpos, colorpos+6):match('#(%x%x)(%x%x)(%x%x)')			if r then				color = tocolor(tonumber(r, 16), tonumber(g, 16), tonumber(b, 16))				colorpos = colorpos + 7			end			nextcolorpos = text:find('#%x%x%x%x%x%x', colorpos) or text:len() + 1			local part = { text = text:sub(colorpos, nextcolorpos - 1), x = curX, y = curY, color = color }			table.insert(self.parts, part)			curX = curX + dxGetTextWidth(part.text, self.scale, self.font)			colorpos = nextcolorpos		end		-----------		local txtnc = string.gsub(self.text, "(#%x%x%x%x%x%x)", function(colorString) return "" end)		--self:setSize(dxGetTextWidth(txtnc, self.scale, self.font),dxGetFontHeight(self.scale, self.font))		local g = Graphics.getInstance()		g:drawSetTextScale(self:getScale())		self.fx,self.fy = g:getTextSize(self.font,txtnc)	end	]]	if(self.text) then		self.textClean = string.gsub(self.text, "(#%x%x%x%x%x%x)", function(colorString) return "" end)		local g = Graphics.getInstance()		g:drawSetTextScale(self:getScale())			local lineCount = 1		self.textClean:gsub("[^\n]+",function(line)			lineCount = lineCount + 1		end)		self.lineCount = lineCount						self.fx,self.fy = self:getTextWidth(), self:getTextHeight()	else		self.lineCount = 0	end			endfunction Label:getScale()	return self.scaleendfunction Label:setScale(scale)	self.scale = scale	self:setText(self.text)endfunction Label:getFont()	return self.fontendfunction Label:setFont(font)	self.font = font	self:setText(self.text)endfunction Label:setTextBorder(outlineSize)	self.outlineSize = outlineSize	self:setText(self.text)endfunction Label:paintComponent(g)	if(not self.text) then return end		local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()	g:drawSetTextScale(self:getScale())	local fx,fy = self.fx,self.fy	g:drawSetTextFont(self.font)	if(self.alignment == Label.LEFT) then			x = x + 2	elseif(self.alignment == Label.CENTER) then			x = x-self.fx/2+w/2	elseif(self.alignment == Label.RIGHT) then			x = x-self.fx+w - 2	end	local color = self:getForeground()	local px,py = x, y-fy/2+h/2	g:drawSetColorCoded(self.colorCoded)		self:drawOutLine(g, self.textClean, self:getBackground(),  px, py, self.outlineSize)	--self:drawShadow(part.text, px+part.x, py+part.y, self:getBackground(), self.scale, self.font, 1, self.width)	g:drawSetTextPos(px+1, py+1)	g:drawSetTextColor(self:getBackground())	g:drawPrintText(self.textClean,0)	g:drawSetTextPos(px, py)		g:drawSetTextColor(color)	g:drawPrintText(self.text,0)			--[[	for i,part in pairs(self.parts) do			color = part.color or color				self:drawOutLine(g, part.text, self:getBackground(),  px+part.x, py+part.y, self.border)		--self:drawShadow(part.text, px+part.x, py+part.y, self:getBackground(), self.scale, self.font, 1, self.width)		g:drawSetTextPos(px+part.x+1, py+part.y+1)		g:drawSetTextColor(self:getBackground())		g:drawPrintText(part.text,0)		g:drawSetTextPos(px+part.x, py+part.y)				g:drawSetTextColor(color)		g:drawPrintText(part.text,0)	end	]]	super.paintComponent(self, g)endfunction Label:drawOutLine(g, text, color, x, y, outlineSize)	if outlineSize > 0 then		g:drawSetTextColor(color)		for offsetX=-outlineSize,outlineSize,outlineSize do			for offsetY=-outlineSize,outlineSize,outlineSize do				if not (offsetX == 0 and offsetY == 0) then					g:drawSetTextPos(x + offsetX, y + offsetY)					g:drawPrintText(text,0)				end			end		end	endendfunction Label:drawShadow(text, x, y, color, scale, font, shadowDist, width, align)	shadowDist = shadowDist or 1	local alpha = math.floor(color / 16777216)	dxDrawText(text, x + shadowDist, y + shadowDist, x + shadowDist + (width or 0), 0, tocolor(0, 0, 0, alpha), scale or 1, font or 'default', width and (align or 'center') or 'left')	dxDrawText(text, x, y, x + (width or 0), 0, color, scale or 1, font or 'default', width and (align or 'center') or 'left')endfunction Label:setClip(clip)	self.clip = clipendfunction Label:setWordBreak(wordBreak)	self.wordBreak = wordBreakendfunction Label:setColorCoded(colorCoded)	self.colorCoded = colorCodedendfunction Label:getTextWidth()	return dxGetTextWidth(self.textClean, self.scale, self.font)endfunction Label:getTextHeight()	return dxGetFontHeight(self.scale, self.font) endfunction Label:getContentHeight()	return self.lineCount * dxGetFontHeight(self.scale, self.font) endfunction Label:getContentSize()	return dxGetTextWidth(self.textClean, self.scale, self.font), self:getContentHeight()endfunction Label:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			--elseif(self:isArmed()) then			--	styleState = ":active"			--elseif(self:isRollover()) then			--	styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style["label" .. styleState]			local classStyle = self:getStyleClass() and style["." .. self:getStyleClass() .. styleState]						local backgroundColor = (idStyle and idStyle._style["background-color"]) 								 or (classStyle and classStyle._style["background-color"])								 or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self:setBackground(tocolor(getColorFromString(backgroundColor)))			end							local color = (idStyle and idStyle._style["color"]) 					   or (classStyle and classStyle._style["color"])					   or (typeStyle and typeStyle._style["color"])					   			if(color) then				self:setForeground(tocolor(getColorFromString(color)))			end						local fontSize = (idStyle and idStyle._style["font-size"]) 						  or (classStyle and classStyle._style["font-size"])						  or (typeStyle and typeStyle._style["font-size"])			if(fontSize) then				local metric = string.match(fontSize, "%a+")								if(metric == "em") then					local size = string.match(fontSize, "[%d%.]+")					self:setScale(tonumber(size))				else									end			end				--[[			if(self.border) then				local border = (idStyle and idStyle._style["border"]) 							or (classStyle and classStyle._style["border"])							or (typeStyle and typeStyle._style["border"])				if(border) then					if(border == "0") then						self.border = nil					else						self.border = BorderFactory.createLineBorder(tocolor(0,0,0), tonumber(border) or 1)					end				end			end			]]					end		self:setText(self:getText())	endend