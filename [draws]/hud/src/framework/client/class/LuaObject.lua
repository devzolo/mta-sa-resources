LuaObject = {}LuaObject.__index = LuaObjectLuaObject.__parent = nilLuaObject.__call = function(clazzRef, ...) return clazzRef.new():init(...) endLuaObject.name = "LuaObject"function LuaObject:new()	local self = self or setmetatable({}, LuaObject)	return selfendfunction LuaObject:init()	return selfendfunction LuaObject:dispose()	endfunction LuaObject:instanceOf(klass)	local m = getmetatable(self)	while m do		if m == klass then return true end		m = m.__parent	end	return falseendfunction instanceOf(obj,clazz)	return type(obj) == "table" and obj.instanceOf and obj:instanceOf(clazz)endfunction LuaObject.getSingleton(clazz)	if(type(clazz) == "table") then		if(not clazz.instance) then			clazz.instance = clazz()		end		return clazz.instance	elseif(type(clazz) == "string" and _G[clazz]) then		if(not _G[clazz].instance) then			_G[clazz].instance = _G[clazz]()		end		return _G[clazz].instance	end	return nilend