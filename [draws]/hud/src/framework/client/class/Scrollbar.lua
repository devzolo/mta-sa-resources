local super = Class("Scrollbar", Component).getSuperclass()Scrollbar.HORIZONTAL = 0Scrollbar.VERTICAL   = 1Scrollbar.MAX_VALUE = 9999999Scrollbar.MIN_VALUE = -9999999local function round(num, idp)	num = num or 0	local mult = 10^(idp or 0)	return math.floor(num * mult + 0.5) / multendfunction Scrollbar:init(orientation, value, visible, minimum, maximum)	super.init(self)	self.value = 0	self.thumbSize = 0	self.thumbUnit = 1		self.lineIncrement = 1	self.pageIncrement = 10	self.orientation = orientation or Scrollbar.VERTICAL	self:setValues(0, 10, 0, 100)	self.rcUpButton = Rect()	self.rcDownButton = Rect()	self.rcThumb = Rect()	--self:addMouseListener(self);	--self:addMouseWheelListener(self);	--self:setForeground(tocolor(50,50,50,50))	--self:setBackground(tocolor(0,0,0,50))	self.drag = false;	--outputDebugString("Scrollbar.new")		self.lineIncrement = 1	self.pageIncrement = 10	self.orientation = orientation or Scrollbar.VERTICAL	self:setValues(value or 0, visible or 10, minimum or 0, maximum or 100)	self.rcUpButton = Rect()	self.rcDownButton = Rect()	self.rcThumb = Rect()	self:addMouseListener(self)	self:addMouseWheelListener(self);	--self:setForeground(tocolor(0,0,0,101))	--self:setBackground(tocolor(0,0,0,200))		self:setButtonColor(tocolor(50,50,50))    self:setThumbColor(tocolor(100,100,100))		self:setGlyphColor(tocolor(200,200,200))	self.drag = false	return selfendfunction Scrollbar:getOrientation()	return self.orientationendfunction Scrollbar:setOrientation(orientation)    if (orientation == self.orientation) then        return    end    if(orientation == Scrollbar.HORIZONTAL or orientation == Scrollbar.VERTICAL) then        self.orientation = orientation	else		outputDebugString("illegal scrollbar orientation")    end	self:removeNotify()	self:addNotify()	--invalidade();endfunction Scrollbar:getValue()	return self.valueendfunction Scrollbar:setValue(newValue)    self:setValues(newValue, self.visibleAmount, self.minimum, self.maximum)endfunction Scrollbar:getMinimum()	return self.minimum;endfunction Scrollbar:setMinimum(newMinimum)    self:setValues(self.value, self.visibleAmount, newMinimum, self.maximum)endfunction Scrollbar:getMaximum()	return self.maximumendfunction Scrollbar:setMaximum(newMaximum)	if (newMaximum == Scrollbar.MIN_VALUE) then		newMaximum = Scrollbar.MIN_VALUE + 1    end    if (self.minimum >= newMaximum) then        self.minimum = newMaximum - 1    end    self:setValues(self.value, self.visibleAmount, self.minimum, newMaximum);endfunction Scrollbar:getVisibleAmount()	return self.visibleAmountendfunction Scrollbar:SetVisibleAmount(newAmount)    self:setValues(self.value, newAmount, self.minimum, self.maximum)endfunction Scrollbar:setUnitIncrement(v)    local tmp = 1	if not (v < 1) then tmp = v end    if (self.lineIncrement == tmp) then        return    end    self.lineIncrement = tmpendfunction Scrollbar:getUnitIncrement()	return self.lineIncrementendfunction Scrollbar:setBlockIncrement(v)    local tmp = 1	if not (v < 1) then tmp = v end    if (self.pageIncrement == tmp) then        return	end    self.pageIncrement = tmpendfunction Scrollbar:getBlockIncrement()	return self.pageIncrementendfunction Scrollbar:setValues(value, visible, minimum, maximum)	if (minimum == Scrollbar.MAX_VALUE) then		minimum = Scrollbar.MAX_VALUE - 1    end    if (maximum <= minimum) then        maximum = minimum + 1    end    local maxMinusMin = maximum - minimum	if (maxMinusMin > Scrollbar.MAX_VALUE) then		maxMinusMin = Scrollbar.MAX_VALUE;        maximum = minimum + maxMinusMin    end    if (visible > maxMinusMin) then        visible = maxMinusMin    end    if (visible < 1) then        visible = 1    end    if (value < minimum) then        value = minimum    end    if (value > maximum - visible) then        value = maximum - visible    end    local oldValue = self.value;    self.value = value;    self.visibleAmount = visible;    self.minimum = minimum;    self.maximum = maximum;    if (round(oldValue) ~= round(value)) then		local e = AdjustmentEvent()		e:init(self, AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED, AdjustmentEvent.TRACK, round(value), true)		self:processEvent(e)        --accessibleContext.firePropertyChange( AccessibleContext.ACCESSIBLE_VALUE_PROPERTY, Integer.valueOf(oldValue), Integer.valueOf(value));    endendfunction Scrollbar:getValueIsAdjusting()    return self.isAdjustingendfunction Scrollbar:setValueIsAdjusting(b)	local oldValue = self.isAdjusting    self.isAdjusting = b	if (oldValue ~= b) then		--accessibleContext.firePropertyChange( AccessibleContext.ACCESSIBLE_STATE_PROPERTY, Integer.valueOf(oldValue), Integer.valueOf(value));	endendfunction Scrollbar:addAdjustmentListener(l)	if (not l) then		return;	end	self.adjustmentListener = EventMulticaster.add(self.adjustmentListener, l)    self.newEventsOnly = trueendfunction Scrollbar:removeAdjustmentListener(l)	if (not l) then		return	end	self.adjustmentListener = EventMulticaster.remove(self.adjustmentListener, l)end--[[function Scrollbar::EventEnabled(GUIEvent* e) {	if (e->GetID() == AdjustmentEvent::ADJUSTMENT_VALUE_CHANGED) {		if ((eventMask & GUIEvent::ADJUSTMENT_EVENT_MASK) != 0 || adjustmentListener != NULL) {			return true;		}		return false;	}	return Super::EventEnabled(e);}]]function Scrollbar:processEvent(e)	if (instanceOf(e,AdjustmentEvent)) then        self:processAdjustmentEvent(e)        return    end	super.processEvent(self,e)endfunction Scrollbar:processAdjustmentEvent(e)    local listener = self.adjustmentListener    if (listener) then        listener:adjustmentValueChanged(e)    endendfunction Scrollbar:setGlyphColor(color)    self.glyphColor = colorendfunction Scrollbar:setButtonColor(color)    self.buttonColor = colorendfunction Scrollbar:setThumbColor(color)    self.thumbColor = colorendfunction Scrollbar:paint(g)	local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()	local colorBG = self.colorBG or self:getBackground()	if(self:isFocusOwner() and self.cursorParked) then		colorBG = self:getBackground()	end			g:drawSetColor( colorBG );	g:drawFilledRect(x,   y,   w, 1);	g:drawFilledRect(x+w, y,   1, h);	g:drawFilledRect(x,   y,   1, h);	g:drawFilledRect(x,   y+h, w, 1);	local color = self.colorFG or self:getForeground()	if(self:isFocusOwner()) then		color = replaceColorAlpha(color, 150)	end	g:drawSetColor( color )	g:drawFilledRect(x + 1, y + 1, w - 1, h - 1);	local b = 4;    if (self.orientation == Scrollbar.HORIZONTAL) then			--UP Button			g:drawSetColor(self.buttonColor)			self.rcUpButton:setBounds((w - h) + x + 1, y + 1, h - 1, h - 1)			g:drawFilledRect(self.rcUpButton:getX(),self.rcUpButton:getY(),self.rcUpButton:getWidth(),self.rcUpButton:getHeight())			--UP Arow			g:drawSetColor(self.glyphColor)			g:drawLine((w-h) + x + b , y + b , (w-h) + x + b , y + h - b)			g:drawLine((w-h) + x + b , y + b , (w-h) + x - b + h , y  + h/2  )			g:drawLine((w-h) + x + b , y + h - b , (w-h) + x - b + h , y + h/2  )			--DOWN Button			g:drawSetColor(self.buttonColor)			self.rcDownButton:setBounds(x + 1, y + 1, h - 1, h - 1)			g:drawFilledRect(self.rcDownButton:getX(),self.rcDownButton:getY(),self.rcDownButton:getWidth(),self.rcDownButton:getHeight())			--DOWN Arow			g:drawSetColor(self.glyphColor)			g:drawLine( x + h - b , y + b ,  x + b , y + h/2)			g:drawLine( x + h - b , y + b ,  x + h - b , y + h - b)			g:drawLine( x + h - b , y + h - b ,  x + b , y + h/2  )			--Thumb			g:drawSetColor(self.thumbColor)			self.thumbSize = (w - h*3);			self.thumbUnit = self.thumbSize / math.max((self.maximum - self.minimum - self.visibleAmount), 1)			if(self.drag) then				local cx,cy = MouseInfo.getPoint()				local pos = cx				local psize = (pos - h - x - 1)-h/2				if(psize >  self.thumbSize) then					psize = self.thumbSize				end				if(psize <  0) then					psize = 0;				end				local pvalue = (psize/self.thumbUnit)				self:setValue(pvalue);			end			self.rcThumb:setBounds((self.thumbUnit*self:getValue()) +h + x + 1, y + 1, h - 1, h - 1)			g:drawFilledRect(self.rcThumb:getX(), self.rcThumb:getY(), self.rcThumb:getWidth(), self.rcThumb:getHeight())			g:drawSetColor(self.glyphColor)			g:drawLine(self.rcThumb:getX()+self.rcThumb:getWidth()/2, self.rcThumb:getY()+b, self.rcThumb:getX()+self.rcThumb:getWidth()/2, self.rcThumb:getY()+self.rcThumb:getWidth()-b)	elseif (self.orientation == Scrollbar.VERTICAL) then			--UP Button			g:drawSetColor(self.buttonColor)			self.rcUpButton:setBounds(x + 1, y + 1, w - 1, w - 1)			g:drawFilledRect(self.rcUpButton:getX(),self.rcUpButton:getY(),self.rcUpButton:getWidth(),self.rcUpButton:getHeight())			--UP Arow			g:drawSetColor(self.glyphColor)			g:drawLine(x + b , y + w - b, x + w/2, y + b)			g:drawLine(x - b + w, y + w - b, x + w/2 , y + b )			g:drawLine(x + b , y + w - b, x + w - b, y + w - b)			--DOWN Button			g:drawSetColor(self.buttonColor)			self.rcDownButton:setBounds(x + 1, (h-w) + y + 1, w - 1, w - 1)			g:drawFilledRect(self.rcDownButton:getX(),self.rcDownButton:getY(),self.rcDownButton:getWidth(),self.rcDownButton:getHeight())			--DOWN Arow			g:drawSetColor(self.glyphColor)			g:drawLine(x + b , h + y - w + b, x + w/2, h + y - b)			g:drawLine(x + w - b , h + y - w + b, x + w/2, h + y - b)			g:drawLine(x + b , h + y - w + b , x + w - b , h + y - w + b)			--Thumb			g:drawSetColor(self.thumbColor)			self.thumbSize = (h - w*3)			self.thumbUnit = self.thumbSize / math.max((self.maximum - self.minimum - self.visibleAmount), 1)			if(self.drag) then				local cx,cy = MouseInfo.getPoint()				local pos = cy				local psize = (- pos + (h-w*2) + y + 1)+w/2				if(psize >  self.thumbSize) then					psize = self.thumbSize				end				if(psize <  0) then					psize = 0				end				local pvalue = (psize/self.thumbUnit)				self:setValue(pvalue)			end			self.rcThumb:setBounds(x + 1, - (self.thumbUnit*self:getValue()) + (h-w*2) + y + 1, w - 1, w - 1)			g:drawFilledRect(self.rcThumb:getX(), self.rcThumb:getY(), self.rcThumb:getWidth(), self.rcThumb:getHeight())			g:drawSetColor(self.glyphColor)			g:drawLine(self.rcThumb:getX()+b, self.rcThumb:getY()+self.rcThumb:getWidth()/2, self.rcThumb:getX()+self.rcThumb:getWidth()-b, self.rcThumb:getY()+self.rcThumb:getWidth()/2)	endendfunction Scrollbar:mouseClicked(e)endfunction Scrollbar:mousePressed(e)	KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(self)	if(e:getButton() == MouseEvent.BUTTON1) then		if(self.rcUpButton:contains(e:getX(), e:getY())) then			self:setValue(self:getValue()+self:getUnitIncrement())		elseif(self.rcDownButton:contains(e:getX(), e:getY())) then			self:setValue(self:getValue()-self:getUnitIncrement())		elseif(self.rcThumb:contains(e:getX(), e:getY())) then			self.drag = true			--self.thumbUnit		end	endendfunction Scrollbar:mouseReleased(e)	if(e:getButton() == MouseEvent.BUTTON1) then		self.drag = false	endendfunction Scrollbar:mouseEntered(e)	self.cursorParked = true	self.colorBG = replaceColorAlpha(self:getBackground(), 150)	self.colorFG = replaceColorAlpha(self:getForeground(), 150)endfunction Scrollbar:mouseExited(e)	self.cursorParked = false	self.colorBG = replaceColorAlpha(self:getBackground(), 100)	self.colorFG = replaceColorAlpha(self:getForeground(), 100)	--self.drag = falseendfunction Scrollbar:mouseWheelMoved(e)	if(e:getScrollAmount() > 0) then		self:setValue(self:getValue()+self:getUnitIncrement())	elseif(e:getScrollAmount() < 0) then		self:setValue(self:getValue()-self:getUnitIncrement())	end	--outputDebugString("Value " .. self:getValue())end