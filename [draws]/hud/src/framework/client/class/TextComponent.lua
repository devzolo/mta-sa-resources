local super = Class("TextComponent", Component).getSuperclass()TextComponent.nameCounter = 0function TextComponent:init(text)	super.init(self)	self.text = text or ""	self.position = self.text:len()	self.keyListener = nil	self.disabledTextColor = tocolor(150,150,150)	--self:addKeyListener(self)	return selfendfunction TextComponent:getText()	return self.textendfunction TextComponent:setText(text)	self.text = textendfunction TextComponent:isEditable()	return self.editable;endfunction TextComponent:setEditable(b)    if (self.editable == b) then        return    end	self.editable = bendfunction TextComponent:setCaretPosition(position)	if (position < 0) then		outputDebugString("position less than zero.")	end	local maxposition = self:getText():len()	if (position > maxposition) then		position = maxposition	end	self.position = positionendfunction TextComponent:getCaretPosition()    local maxposition = self:getText():len()    if (self.position < 0) then        self.position = 0    end    if (self.position > maxposition) then        self.position = maxposition    end    return self.positionendfunction TextComponent:keyTyped(e)	outputDebugString("char " .. e:getKeyChar())	if(e:getKeyChar() == KeyEvent.VK_TAB) then		return	end	if(e:getKeyChar() == KeyEvent.VK_BACK_SPACE) then		if(self:getCaretPosition() > 0) then			self:setCaretPosition(self.position - 1)			local buff = ""			buff = buff .. self.text:sub(1,self:getCaretPosition())			--buff = buff .. self.text:sub(self:getCaretPosition())			self.text = buff		end		return	end	--local buff = ""	--buff = self.text:sub(0,self:getCaretPosition())	--buff = buff .. e:getKeyChar()	--buff = buff .. self.text:sub(self:getCaretPosition())	--self.text = buff	local buff = ""	buff = self.text:sub(1,self:getCaretPosition())	buff = buff .. e:getKeyChar()	--buff = buff .. self.text:sub(self:getCaretPosition())	self.text = buff	self:setCaretPosition(self.position + 1)endfunction TextComponent:keyPressed(e)	if(text) then		--printf("code %x \n",e->GetKeyCode());		if(e:isActionKey()) then			if(e:getKeyCode() == KeyEvent.VK_LEFT) then				self.position = self.position - 1				return			end			if(e:getKeyCode() == KeyEvent.VK_RIGHT) then				self.position = self.position + 1				return			end		else			if(e:getKeyChar() == KeyEvent.VK_PERIOD) then				if(self:getCaretPosition() ~= self.text:len()) then					local buff = ""					buff = buff .. self.text:sub(0,self:getCaretPosition())					buff = buff .. self.text:sub(self:getCaretPosition()+1)					self.text = buff				end				return;			end		end	endendfunction TextComponent:keyReleased(e)	outoutDebugString("TextComponent:keyReleased")endfunction TextComponent:enableInputMethodsIfNecessary()	if (checkForEnableIM) then		checkForEnableIM = false		local shouldEnable = true		self:enableInputMethods(shouldEnable)	endendfunction TextComponent:enableInputMethods(enable)    checkForEnableIM = false;endfunction TextComponent:areInputMethodsEnabled()    if (checkForEnableIM) then        self:enableInputMethodsIfNecessary()    end	return trueendfunction TextComponent:getDisabledTextColor()	return self.disabledTextColorendfunction TextComponent:setDisabledTextColor(r, g, b, a)	local old = self.disabledTextColor	self.disabledTextColor = Color.toColorValue(r, g, b, a)	self:firePropertyChange("disabledTextColor", old, self.disabledTextColor)end