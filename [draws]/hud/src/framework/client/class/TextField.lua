local super = Class("TextField", TextComponent).getSuperclass()TextField.nameCounter = 0function TextField:init(text, columns)	super.init(self, text or "")	self.columns = columns or 1	self.font = "default"	self.placeholder = nil		self.actionListener = nil	self:addMouseListener(self)	self:addFocusListener(self)	self:setBackground(tocolor(197, 234, 244, 223))	self:setForeground(tocolor(31, 40, 50, 223))		self.border = BorderFactory.createLineBorder(tocolor(0,0,0), 1)		self.guiEdit = guiCreateEdit(-100, -100, 100, 20, "", false)	guiSetAlpha(self.guiEdit, 0)	self.onClientGUIFocus = function()		--guiSetVisible(self.guiEdit, self:isShowing())		if(instanceOf(self:getNativeContainer(), Graphics)) then			if(not getElementData(self.guiEdit, "focus")) then				KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(self)			end		else			if(isElement(self.guiEdit)) then				destroyElement(self.guiEdit)			end			self.guiEdit = nil		end	end	addEventHandler("onClientGUIFocus", self.guiEdit, self.onClientGUIFocus, true)		--self.onClientGUIBlur = function()	--	KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(nil)	--	guiMoveToBack(self.guiEdit)	--	guiSetInputEnabled(false)				--end	--addEventHandler("onClientGUIBlur", self.guiEdit, self.onClientGUIBlur, true)			--self.onClientGUIBlur = function()	--	KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(nil)	--end	--addEventHandler("onClientGUIBlur", self.guiEdit, self.onClientGUIBlur, true)			--self.guiEdit = guiCreateEdit(200, 200, 200, 200, "", false)    -- local props = guiGetProperties(self.guiEdit)    ---    for propName,propVal in pairs(props) do    --        outputConsole(propName .. " = " .. propVal)    --    end						--guiGetProperty(self.guiEdit, "CaratIndex")	--guiSetAlpha(self.guiEdit, 0)	self.active = false		self.focusHardcoded = false		return selfendfunction TextField:getEchoText()	return self.textendfunction TextField:paintComponent(g)	self:debugClear()	local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()	g:drawSetColorCoded(false)	g:drawSetColor(self:getBackground())	g:drawFilledRect(x + 1, y + 1, w - 1, h - 1)	--if (self.guiEdit) then		self.text = "" .. (self.guiEdit and guiGetText(self.guiEdit) or self.text or "")	--end			g:drawSetTextScale(1)	g:drawSetTextFont(self.font)		local carretMaxOffsetX = 6		if(self.text) then		local viewText = self:getEchoText()				--Draw Text		local fx,fy = g:getTextSize(self.font, viewText)		local dx = x+2;		local dy = y-fy/2+h/2;		local tend, px = g:getPossibleTextSize(self.font, viewText, w-carretMaxOffsetX)				local debugStr = "none"				self:debugAdd(string.format("str = %s", viewText))		self:debugAdd(string.format("carert = %d , tend = %d",self:getCaretPosition(), tend))		self:debugAdd(string.format("w = %d , px = %d",w, px))		self:debugAdd(string.format("fx = %d , fy = %d",fx, fy))							if(self:getCaretPosition() > tend) then			debugStr = "if"			viewText = viewText:utfSub(1, self:getCaretPosition())			--local viewTextReverse = viewText:utfReverse()			--tend, px = g:getPossibleTextSize(self.font, viewText, w-carretMaxOffsetX, true)			tend, px = g:getPossibleTextSize(self.font, viewText, w-carretMaxOffsetX, true)			self:debugAdd(string.format("carert = %d , tend = %d",self:getCaretPosition(), tend))			self:debugAdd(string.format("w = %d , px = %d",w, px))			if(fx > px) then				local len =viewText:utfLen()				viewText = viewText:utfSub(len - tend + 1, len)				fx = px			end			--viewText = tmp1						--[[						viewText = viewText:utfSub(self:getCaretPosition()-tend, self:getCaretPosition())			tend, px = g:getPossibleTextSize(self.font, viewText, w-carretMaxOffsetX)			fx,fy = g:getTextSize(self.font, viewText)			if(fx > px) then				--tend, px = g:getPossibleTextSize(self.font, viewText, w-carretMaxOffsetX)				--viewText = viewText:utfSub(1, self:getCaretPosition()-tend)				fx = px			end			]]			--viewText = viewText:reverse()			--viewText = tmp1		else			debugStr = "else"			--self:debugAdd(string.format("len = %d utfLen = %d", viewText:len(), viewText:utfLen()))			if(tend <= viewText:utfLen()) then				if(self:getCaretPosition() > viewText:utfLen()) then					viewText = viewText:utfSub(1, tend)					fx,fy = g:getTextSize(self.font, viewText)				elseif(self:getCaretPosition() <= viewText:utfLen()) then					local tmp = viewText:utfSub(1, self:getCaretPosition())					fx, fy = g:getTextSize(self.font, tmp)					viewText = viewText:utfSub(1, tend)				end			end		end		self:paintPlaceholder(g, dx, dy)				g:drawSetTextPos(dx,dy)		g:drawSetTextColor(self:getForeground())		g:drawPrintText(viewText,0)						self:debugAdd(debugStr)								--if(fx < 0) then		--	fx = 0		--end				--Draw Caret		if(self:isFocusOwner()) then			visibleTick = visibleTick or getTickCount()			if(getTickCount() - visibleTick < 500) then				g:drawSetColor( 200,200,200,200 )				g:drawSetColor( 0, 0, 0, 255 )				g:drawFilledRect(dx+fx, dy , 4, fy)				g:drawSetColor(200,200,200,200)				g:drawFilledRect(dx+fx+1, dy+1 , 4-2, fy-2)			else				if(getTickCount() - visibleTick >= 1000) then					visibleTick = getTickCount()				end			end		end	end		self:debugDraw(g)endfunction TextField:debugClear()	--self.debugTexts = {}endfunction TextField:debugAdd(text)	--table.insert(self.debugTexts,text)endfunction TextField:debugDraw(g)--[[	local x, y = self:getLocationOnScreen()		y = y + 20	for k,v in ipairs(self.debugTexts) do		g:drawSetTextPos(x, y + 15 * k)		g:drawPrintText(v, 0)	end]]endfunction TextField:processEvent(e)	if (instanceOf(e, ActionEvent)) then		outputDebugString('TextField:ActionEvent')		self:processActionEvent(e)		return	end	super.processEvent(self, e);endfunction TextField:processActionEvent(e)	outputDebugString('TextField:processActionEvent')	if(e:getSource() == self) then		if(not self:isFocusOwner()) then			KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(self)		end	end    local listener = self.actionListener    if (listener) then        listener:actionPerformed(e)    endendfunction TextField:mouseClicked(e)endfunction TextField:mousePressed(e)	self:processEvent(ActionEvent.new(self,ActionEvent.ACTION_PERFORMED,"ACTION_PERFORMED",0,0))	if(not self:isFocusOwner()) then		KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(self)	endendfunction TextField:mouseReleased(e)endfunction TextField:mouseEntered(e)	self.rollover = true	self:repaint()endfunction TextField:mouseExited(e)	self.rollover = false	self:repaint()endfunction TextField:focusGained(e)	outputDebugString("TextField:focusGained")	if (self.guiEdit) then		setElementData(self.guiEdit, "focus", true)		guiBringToFront(self.guiEdit)		setElementData(self.guiEdit, "focus", false)		guiSetInputEnabled(true)	end		self:repaint()endfunction TextField:focusLost(e)	outputDebugString("TextField:focusLost")	if (self.guiEdit) then		setElementData(self.guiEdit, "blur", true)		guiMoveToBack(self.guiEdit)		setElementData(self.guiEdit, "blur", false)		end	--guiSetInputEnabled(false)	self:repaint()endfunction TextField:getText()	if (self.guiEdit) then		return guiGetText(self.guiEdit)	end	return ""endfunction TextField:setText(text)	if (self.guiEdit) then		guiSetText(self.guiEdit, text or "")		guiEditSetCaretIndex(self.guiEdit, string.len(text or ""))	endendfunction TextField:getCaretPosition()	if (self.guiEdit) then		return guiEditGetCaretIndex(self.guiEdit) --tonumber(guiGetProperty(self.guiEdit, "CaratIndex"))	end	return 0endfunction TextField:setCaretPosition(position)	if (self.guiEdit) then		return guiEditSetCaretIndex(self.guiEdit,position) --guiSetProperty(self.guiEdit, "CaratIndex", position)	end	return falseendfunction TextField:getPlaceholder()	return self.placeholderendfunction TextField:setPlaceholder(s)	self.placeholder = sendfunction TextField:paintPlaceholder(g, x, y)	if (not self.placeholder  or (self.text and string.len(self.text) > 0)) then		return	end	g:drawSetTextPos(x, y)	g:drawSetTextColor(self:getDisabledTextColor())	g:drawPrintText(self.placeholder, 0)endfunction TextField:isRollover()	return self.rolloverendfunction TextField:setEnabled(enabled)	super.setEnabled(self, enabled)	self:repaint()endfunction TextField:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			elseif(self:isRollover()) then				styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style["textfield" .. styleState]						local backgroundColor = (idStyle and idStyle._style["background-color"]) or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self:setBackground(tocolor(getColorFromString(backgroundColor)))			end							local color= (idStyle and idStyle._style["color"]) or (typeStyle and typeStyle._style["color"])			if(color) then				self:setForeground(tocolor(getColorFromString(color)))				end		end	endend