local super = Class("Component", LuaObject).getSuperclass()-- Private flagsComponent.IS_DOUBLE_BUFFERED                       =  0Component.ANCESTOR_USING_BUFFER                    =  1Component.IS_PAINTING_TILE                         =  2Component.IS_OPAQUE                                =  3Component.KEY_EVENTS_ENABLED                       =  4Component.FOCUS_INPUTMAP_CREATED                   =  5Component.ANCESTOR_INPUTMAP_CREATED                =  6Component.WIF_INPUTMAP_CREATED                     =  7Component.ACTIONMAP_CREATED                        =  8Component.CREATED_DOUBLE_BUFFER                    =  9-- bit 10 is freeComponent.IS_PRINTING                              = 11Component.IS_PRINTING_ALL                          = 12Component.IS_REPAINTING                            = 13-- Bits 14-21 are used to handle nested writeObject calls.Component.WRITE_OBJ_COUNTER_FIRST                  = 14Component.RESERVED_1                               = 15Component.RESERVED_2                               = 16Component.RESERVED_3                               = 17Component.RESERVED_4                               = 18Component.RESERVED_5                               = 19Component.RESERVED_6                               = 20Component.WRITE_OBJ_COUNTER_LAST                   = 21Component.REQUEST_FOCUS_DISABLED                   = 22Component.INHERITS_POPUP_MENU                      = 23Component.OPAQUE_SET                               = 24Component.AUTOSCROLLS_SET                          = 25Component.FOCUS_TRAVERSAL_KEYS_FORWARD_SET         = 26Component.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET        = 27Component.FOCUS_TRAVERSABLE_UNKNOWN = 0Component.FOCUS_TRAVERSABLE_DEFAULT = 1Component.FOCUS_TRAVERSABLE_SET 	= 2function Component.executeListener(listener, method, e)	if(listener[method])then 		if(listener.__index)then			listener[method](listener, e) 		else			listener[method](e) 		end	endendfunction Component:init()	super.init(self)	self.id = ""	self.valid = false	self.flags = 0	self.border = nil	self.visible = true	self.enabled = true	self.valid = false	self.focusable = true	self.parent = nil	self.font = nil	self.x = 0	self.y = 0	self.width = 0	self.height = 0		self.font = "default"	self.zOrder = 0	--self.background = tocolor(255,255,255,255)	--self.foreground = tocolor(255,255,255,255)	--outputDebugString("Component.new")		self:setFocusTraversalKeysEnabled(true)			return selfendfunction Component:setId(id)	self.id = id	self:repaint()endfunction Component:getId()	return self.idendfunction Component:setStylesheet(stylesheet)	self.stylesheet = stylesheetendfunction Component:getStylesheet()	if(self.stylesheet) then		return self.stylesheet	end	local p = self	while(p:getParent()) do		p = p:getParent()		if(p and p.stylesheet) then			return p.stylesheet		end	end	return nilendfunction Component:setStyle(style)	self.style = styleendfunction Component:getStyle()	return self.styleendfunction Component:setStyleClass(styleClass)	self.styleClass = styleClassendfunction Component:getStyleClass()	return self.styleClassendfunction Component:css(str)	self:setStylesheet(StylesheetParser():parsestr(str))endfunction Component:getX() return self.x endfunction Component:getY() return self.y endfunction Component:getWidth() return self.width endfunction Component:getHeight() return self.height endfunction Component:isOpaque()	return self:getFlag(Component.IS_OPAQUE)endfunction Component:setOpaque(isOpaque)	local oldValue = self:getFlag(Component.IS_OPAQUE)	self:setFlag(Component.IS_OPAQUE, isOpaque)	self:setFlag(Component.OPAQUE_SET, true)	self:firePropertyChange("opaque", oldValue, isOpaque)endfunction Component:getParent()    return self.parentendfunction Component:isVisible()	return self.visibleendfunction Component:setVisible(visible)	self.visible = visibleendfunction Component:isDisplayable()	return trueendfunction Component:isEnabled()	return self.enabledendfunction Component:setEnabled(enabled)	self.enabled = enabledendfunction Component:addNotify() endfunction Component:removeNotify() endfunction Component:isShowing()	if (self.visible) then		return (self.parent == nil) or self.parent:isShowing()	end	return falseendfunction Component:isOpaque()    return falseendfunction Component:getBorder()	return self.borderendfunction Component:setBorder(border)	self.border = borderendfunction Component:paintComponent(g)    if (self.ui ~= nil) then		self.ui:update(g, self)	endendfunction Component:paintBorder(g)	local border = self:getBorder()	if (border ~= nil) then		local x, y = self:getLocationOnScreen()		border:paintBorder(self, g, x, y, self:getWidth(), self:getHeight())	endendfunction Component:paintChildren(g)endfunction Component:paint(g)	if(not self:isValid()) then		self:repaint()		self:validate()	end	self:paintComponent(g)	self:paintBorder(g)    self:paintChildren(g)endfunction Component:getName()	return self.nameendfunction Component:setName(name)	self.name = nameendfunction Component:getZOrder()	return self.zOrderendfunction Component:setZOrder(zOrder)	self.zOrder = zOrderendfunction Component:pointRelativeToComponent(absx, absy)	local compX, compY = self:getLocationOnScreen()	return absx - compX, absy - compYendfunction Component:getNativeContainer()	local p = self.parent	while(p:getParent()) do		p = p:getParent()	end	return pendfunction Component:getLocation()	return self.x, self.yendfunction Component:getX()	return self.xendfunction Component:getY()	return self.yendfunction Component:setLocation(x, y)	self.x = x	self.y = yendfunction Component:getLocationOnScreen(canvas)	local ptX, ptY = 0, 0		if(instanceOf(self:getParent(),Canvas) and canvas == nil) then		return ptX, ptY	end			local host = self:getNativeContainer()	local c = self    while(c ~= host) do		ptX = ptX + c:getX()        ptY = ptY + c:getY()		c = c:getParent()				if(c.paintingComponents) then			return ptX, ptY		end	end	return ptX, ptYendfunction Component:getForeground()	if (self.foreground ~= nil) then		return self.foreground	elseif(self.parent ~= nil) then		return self.parent:getForeground()	end	return nilendfunction Component:setForeground(...)	self.foreground = Color.toColorValue(...)endfunction Component:getBackground()	if (self.background ~= nil) then		return self.background	elseif(self.parent ~= nil) then		return self.parent:getBackground()	end	return nilendfunction Component:setBackground(...)	self.background = Color.toColorValue(...)endfunction Component:contains(x,y)	if(self.ignoreEvents) then 		return false 	end	if (instanceOf(self.parent,HTML)) then		local viewX = x - self.parent.viewX 		local viewY = y - self.parent.viewY		return (viewX >= 0) and (viewX < self.width) and (viewY >= 0) and (viewY < self.height) 	end	return (x >= 0) and (x < self.width) and (y >= 0) and (y < self.height)endfunction Component:getComponentAt(x,y)	if(self:contains(x, y)) then		return self	end	return nilendfunction Component:setLocation(x,y)	self:setBounds(x,y,self.width,self.height)endfunction Component:setSize(width,height)	self:setBounds(self.x,self.y,width,height)endfunction Component:getSize()	return self.width, self.heightendfunction Component:getBounds()	return self.x, self.y, self.width, self.heightendfunction Component:setBounds(x, y, width, height)    local resized = (self.width ~= width) or (self.height ~= height)    local moved = (self.x ~= x) or (self.y ~= y)    if (not resized and not moved) then        return    end    local oldX = self.x    local oldY = self.y    local oldWidth = self.width    local oldHeight = self.height    self.x = x    self.y = y    self.width = width    self.height = height    if (resized) then        self.isPacked = false    end	local needNotify = true	if (needNotify) then		--notifyNewBounds(resized, moved)	endend--[[function Component::PrepareImage(Image* image, ImageObserver* observer) {	return PrepareImage(image, -1, -1, observer);}function Component::PrepareImage(Image* image, int width, int height,ImageObserver* observer) {	return ToolKit::GetDefaultToolKit()->PrepareImage(image, width, height, observer);}function Component::CheckImage(Image* image, ImageObserver* observer) {    return CheckImage(image, -1, -1, observer);}function Component::CheckImage(Image* image, int width, int height,ImageObserver* observer) {	return (parent != NULL)		? parent->CheckImage(image, width, height, observer)		: GetToolKit()->CheckImage(image, width, height, observer);}]]function Component:setFocusable(focusable)	local oldFocusable = self.focusable	self.focusable = focusable	self.isFocusTraversableOverridden = FOCUS_TRAVERSABLE_SET	self:firePropertyChange("focusable", oldFocusable, focusable)	if (oldFocusable and not focusable) then		if (self:isFocusOwner() and KeyboardFocusManager.isAutoFocusTransferEnabled()) then			self:transferFocus(true)		end		KeyboardFocusManager.clearMostRecentFocusOwner(self)	endend	function Component:isFocusable()	return self.focusableendfunction Component:hasFocus()	return (KeyboardFocusManager.getCurrentKeyboardFocusManager():getFocusOwner() == self)endfunction Component:isFocusOwner()	return self:hasFocus()endfunction Component:addChangeListener(l)	if (l == nil) then		return	end	l.isChangeListener = true	self.changeListener = EventMulticaster.add(self.changeListener, l)endfunction Component:removeChangeListener(l)	if (l == nil) then		return	end	self.changeListener = EventMulticaster.remove(self.changeListener, l)	l.isChangeListener = falseendfunction Component:addFocusListener(l)	if (l == nil) then		return	end	l.isFocusListener = true	self.focusListener = EventMulticaster.add(self.focusListener, l)endfunction Component:removeFocusListener(l)	if (l == nil) then		return	end	self.focusListener = EventMulticaster.remove(self.focusListener, l)	l.isFocusListener = falseendfunction Component:addMouseMotionListener(l)	if (l == nil) then		return	end	l.isMouseMotionListener = true	self.mouseMotionListener = EventMulticaster.add(self.mouseMotionListener, l)	self.newEventsOnly = trueendfunction Component:removeMouseMotionListener(l)	if (l == nil) then		return	end	self.mouseMotionListener = EventMulticaster.remove(self.mouseMotionListener, l)	l.isMouseMotionListener = falseendfunction Component:addKeyListener(l)	if (l == nil) then		return	end	self.isKeyListener = true	self.keyListener = EventMulticaster.add(self.keyListener, l)	self.newEventsOnly = trueendfunction Component:removeKeyListener(l)	if (l == nil) then		return	end	self.keyListener = EventMulticaster.remove(self.keyListener, l)	self.isKeyListener = falseendfunction Component:addMouseListener(l)	if (l == nil) then		return	end	l.isMouseListener = true	self.mouseListener = EventMulticaster.add(self.mouseListener, l)	self.newEventsOnly = trueendfunction Component:removeMouseListener(l)	if (l == nil) then		return	end	self.mouseListener = EventMulticaster.remove(self.mouseListener, l)	l.isMouseListener = falseendfunction Component:addMouseWheelListener(l)	if (l == nil) then		return	end	l.isMouseWheelListener = true	self.mouseWheelListener = EventMulticaster.add(self.mouseWheelListener, l)	self.newEventsOnly = trueendfunction Component:removeMouseWheelListener(l)	if (l == nil) then		return	end	self.mouseWheelListener = EventMulticaster.remove(self.mouseWheelListener, l)	l.isMouseWheelListener = falseendfunction Component:addPropertyChangeListener(l)	if (l == nil) then		return	end	l.isPropertyChangeListener = true	self.propertyChangeListener = EventMulticaster.add(self.propertyChangeListener, l)endfunction Component:removePropertyChangeListener(l)	if (l == nil) then		return	end	self.propertyChangeListener = EventMulticaster.remove(self.propertyChangeListener, l)	l.isPropertyChangeListener = falseendfunction Component:firePropertyChange(propertyName, oldValue, newValue)	if (not self.propertyChangeListener or (oldValue and newValue and oldValue == newValue)) then		return	end	--self.propertyChangeListener:firePropertyChange(propertyName, oldValue, newValue);	--local e = PropertyChangeEvent(propertyName, oldValue, newValue)	local e = {		source = self,		propertyName = propertyName,		oldValue = oldValue,		newValue = newValue	}	self.propertyChangeListener:propertyChange(e)endfunction Component:processEvent(e)	if(e == nil) then		return	elseif (instanceOf(e,FocusEvent)) then        self:processFocusEvent(e)	elseif (instanceOf(e,MouseEvent)) then		local id = e:getID()        if(id == MouseEvent.MOUSE_PRESSED or		   id == MouseEvent.MOUSE_RELEASED or           id == MouseEvent.MOUSE_CLICKED or           id == MouseEvent.MOUSE_ENTERED or           id == MouseEvent.MOUSE_EXITED) then			self:processMouseEvent(e)        elseif(id == MouseEvent.MOUSE_MOVED or				id == MouseEvent.MOUSE_DRAGGED) then			self:processMouseMotionEvent(e)		elseif(id == MouseEvent.MOUSE_WHEEL) then			self:processMouseWheelEvent(e)        end	elseif (instanceOf(e,KeyEvent)) then        self:processKeyEvent(e)		if (not e:isConsumed()) then			KeyboardFocusManager.getCurrentKeyboardFocusManager():processKeyEvent(self, e)			if (e:isConsumed()) then				return;			end        end	    end--[[	else if (e instanceof ComponentEvent) {        processComponentEvent((ComponentEvent)e);    } else if (e instanceof InputMethodEvent) {        processInputMethodEvent((InputMethodEvent)e);    } else if (e instanceof HierarchyEvent) {        switch (e.getID()) {          case HierarchyEvent.HIERARCHY_CHANGED:              processHierarchyEvent((HierarchyEvent)e);              break;          case HierarchyEvent.ANCESTOR_MOVED:          case HierarchyEvent.ANCESTOR_RESIZED:              processHierarchyBoundsEvent((HierarchyEvent)e);              break;        }    }]]endfunction Component:processFocusEvent(e)	if(e == nil) then return end	local listener = self.focusListener	if (listener ~= nil) then		local id = e:getID()		if(id == FocusEvent.FOCUS_GAINED) then			Component.executeListener(listener, "focusGained", e)		elseif(id == FocusEvent.FOCUS_LOST) then			Component.executeListener(listener, "focusLost", e)		end	endendfunction Component:processMouseEvent(e)	local listener = self.mouseListener		if(self.decorator) then		e.source = self.parent		listener = self.parent.mouseListener	end		    if (listener ~= nil) then        local id = e:getID()        if(id == MouseEvent.MOUSE_PRESSED) then			Component.executeListener(listener, "mousePressed", e)		elseif(id == MouseEvent.MOUSE_RELEASED) then			Component.executeListener(listener, "mouseReleased", e)        elseif(id == MouseEvent.MOUSE_CLICKED) then			Component.executeListener(listener, "mouseClicked", e)        elseif(id == MouseEvent.MOUSE_EXITED) then			Component.executeListener(listener, "mouseExited", e)        elseif(id == MouseEvent.MOUSE_ENTERED) then			Component.executeListener(listener, "mouseEntered", e)        end    endendfunction Component:processMouseMotionEvent(e)	local listener = self.mouseMotionListener	if (listener ~= nil) then		local id = e:getID()		if(id == MouseEvent.MOUSE_MOVED and listener.mouseMoved) then			e:setSource(self)			Component.executeListener(listener, "mouseMoved", e)		elseif(id == MouseEvent.MOUSE_DRAGGED and listener.mouseDragged) then			Component.executeListener(listener, "mouseDragged", e)			end	endendfunction Component:processMouseWheelEvent(e)    local listener = self.mouseWheelListener    if (listener ~= nil) then        local id = e:getID()        if(id == MouseEvent.MOUSE_WHEEL) then			Component.executeListener(listener, "mouseWheelMoved", e)		        end    endendfunction Component:processKeyEvent(e)    local listener = self.keyListener    if (listener ~= nil) then        local id = e:getID()        if(id == KeyEvent.KEY_TYPED) then			Component.executeListener(listener, "keyTyped", e)		elseif(id == KeyEvent.KEY_PRESSED) then			Component.executeListener(listener, "keyPressed", e)        elseif(id == KeyEvent.KEY_RELEASED) then			Component.executeListener(listener, "keyReleased", e)        end    endendfunction Component:isContainer()    return falseendfunction Component:repaint()	if(self.updateUI) then		self:updateUI()	endendfunction Component:getFocusTraversalKeysEnabled()	return self.focusTraversalKeysEnabledendfunction Component:setFocusTraversalKeysEnabled(focusTraversalKeysEnabled)	self.focusTraversalKeysEnabled = focusTraversalKeysEnabledendfunction Component:canBeFocusOwner()	if (self:isEnabled() and self:isDisplayable() and self:isVisible() and self:isFocusable()) then		return true	end	return falseend function Component:transferFocus(clearOnFailure)	local toFocus = self:getNextFocusCandidate()		local res = false	if (toFocus ~= nil and not toFocus:isFocusOwner() and toFocus ~= self) then		res = toFocus.requestFocusInWindow(KeyboardFocusManager.TRAVERSAL_FORWARD)	end	if (clearOnFailure and not res) then		KeyboardFocusManager.getCurrentKeyboardFocusManager():clearGlobalFocusOwner();	end	return resendfunction Component:getFocusCycleRootAncestor()	local rootAncestor = self.parent	while (rootAncestor ~= nil and not rootAncestor:isFocusCycleRoot()) do		rootAncestor = rootAncestor.parent	end	return rootAncestorendfunction Component:isFocusCycleRoot(container)	local rootAncestor = self:getFocusCycleRootAncestor()	return (rootAncestor == container)endfunction Component:getTraversalRoot()	return self:getFocusCycleRootAncestor()endfunction Component:getNextFocusCandidate()	local candidate = nil	local rootAncestor = self:getTraversalRoot()	local comp = self		while (rootAncestor ~= nil and not(rootAncestor:isShowing() and rootAncestor:canBeFocusOwner())) do		comp = rootAncestor		rootAncestor = comp:getFocusCycleRootAncestor();	end	if (rootAncestor ~= nil) then		local policy = rootAncestor:getFocusTraversalPolicy()		local toFocus = policy:getComponentAfter(rootAncestor, comp)		if (toFocus == nil) then			toFocus = policy:getDefaultComponent(rootAncestor)		end		candidate = toFocus	end	return candidateendfunction Component:setFlag(aFlag, aValue)	if(aValue) then		self.flags = bitOr(self.flags, bitLShift(1, aFlag))	else		self.flags = bitXor(self.flags, bitLShift(1, aFlag))	endend	function Component:getFlag(aFlag)	local mask = bitLShift(1, aFlag)	return bitAnd(self.flags, mask) == maskendfunction Component:getPropertyChangeListeners()	--if(changeSupport == nil) then	--	return {}	--end	--return self.changeSupport:getPropertyChangeListeners()	return EventMulticaster.getListeners(self.propertyChangeListener, PropertyChangeListener)endfunction Component:getListeners(listenerType)	local l = nil	if(listenerType == ComponentListener) then		l = self.componentListener	elseif (listenerType == FocusListener) then		l = self.focusListener	elseif (listenerType == HierarchyListener) then		l = self.hierarchyListener	elseif (listenerType == HierarchyBoundsListener) then		l = self.hierarchyBoundsListener	elseif (listenerType == KeyListener) then		l = self.keyListener	elseif (listenerType == MouseListener) then		l = self.mouseListener	elseif (listenerType == MouseMotionListener) then		l = self.mouseMotionListener	elseif (listenerType == MouseWheelListener) then		l = self.mouseWheelListener	elseif (listenerType == InputMethodListener) then		l = self.inputMethodListener	elseif (listenerType == PropertyChangeListener) then		l = self.propertyChangeListener		--return self:getPropertyChangeListeners()	end	return EventMulticaster.getListeners(l, listenerType)endfunction Component:mixOnValidating() end		function Component:isValid()	return self.validend	function Component:validate()	if (not self.valid) then		local wasValid = self:isValid()		if (not wasValid) then			end		self.valid = true		if (not wasValid) then			self:mixOnValidating()		end	endendfunction Component:invalidate()	self.valid = false	--[[	if (not self:isPreferredSizeSet()) then		self.prefSize = nil;	end	if (not self:isMinimumSizeSet()) then		self.minSize = nil;	end	if (not self:isMaximumSizeSet()) then		self.maxSize = nil;	end	]]	if (self.parent ~= nil) then		self.parent:invalidateIfValid()	endendfunction Component:invalidateIfValid()	if (self:isValid()) then		self:invalidate()	endendfunction Component:revalidate()	if (self:getParent() == nil) then		return	endend