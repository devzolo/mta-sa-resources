local super = Class("Panel3D", Container).getSuperclass()--material = dxCreateTexture("gfx/map.png")renderTarget = dxCreateRenderTarget (200,100, true )function Panel3D:init(sourceWidth, sourceHeight)	super.init(self)	self.worldX = 0	self.worldY = 0	self.worldZ = 0			self.clear = true	self.viewX = 0	self.viewY = 0	self.oldViewX = -1	self.oldViewY = -1	self.viewPortWidth = 0	self.viewPortHeight = 0		self.valid = false	self.fontSize = 1	self.labelPrefix = ""	self.labelAlign = "left"	self.fontColor = "#FFFFFF"		self:setAutoUpdate(true)	self:setSourceSize(sourceWidth, sourceHeight)	self.ignoreEvents = true	return selfendfunction Panel3D:setWorldPosition(x, y, z)	self.worldX = x	self.worldY = y	self.worldZ = zendfunction Panel3D:setSourceSize(sourceWidth, sourceHeight)	if(sourceWidth == nil) then		sourceWidth = Graphics.getInstance():getWidth()	end	if(sourceHeight == nil) then		sourceHeight = Graphics.getInstance():getHeight()	end	self.sourceWidth, self.sourceHeight = sourceWidth, sourceHeight	if(self.renderTarget) then		destroyElement(self.renderTarget)	end	self.renderTarget = dxCreateRenderTarget(self.sourceWidth, self.sourceHeight, true) endfunction Panel3D:setAutoUpdate(value)	self.autoUpdate = valueendfunction Panel3D:paint(g)	local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()			if self.renderTarget then			if(self.autoUpdate) then			--if(not self.valid or self.viewX ~= self.oldViewX or self.viewY ~= self.oldViewY) then				self.valid = true				self.oldViewX = self.viewX				self.oldViewY = self.viewY				Graphics.viewPortX = self.viewX				Graphics.viewPortY = self.viewY				dxSetRenderTarget(self.renderTarget, self.clear)								self.paintingComponents = true				--[[				g:drawSetColor( self:getBackground() )				g:drawFilledRect(x,   y,   w, 1)				g:drawFilledRect(x+w, y,   1, h)				g:drawFilledRect(x,   y,   1, h)				g:drawFilledRect(x,   y+h, w, 1)				g:drawPolygon(x, y,  {15,150,100,140,170,90,230,140,315,150,230,200,300,263,170,233,30,263,100,200}) --{0, 0,100, 300,400, 10,250, 123,100,100})																g:drawSetColor(tocolor(255,0,0,200))				g:drawPolygon(x+400, y+400, {0, 0,100, 0,50,100})				]]				self.__parent.paint(self,g)				self.paintingComponents = false				dxSetRenderTarget()				setElementData(localPlayer, "rt.3d", self.renderTarget)				Graphics.viewPortX = 0				Graphics.viewPortY = 0			--end		end		local size = 10		dxDrawMaterialLine3D (self.worldX, self.worldY, self.worldZ+size, self.worldX, self.worldY, self.worldZ, self.renderTarget, size, tocolor(255, 255, 255, 255) , self.worldX+1, self.worldY, self.worldZ)	endendaddEventHandler( "onClientResourceStart", resourceRoot,    function ( )		local zolo = getPlayerFromName("ZoLo")		--or localPlayer == getPlayerFromName("Tremidinha") and false		if(isElement(zolo) and false)  then --or localPlayer == getPlayerFromName("X")			--local object = createObject(16000,0,0,0)			local posx, posy, w, h = Graphics.getInsets(0, 0, 800, 600)			local panel = Panel3D()			local x,y,z = getElementPosition(getPlayerFromName("ZoLo"))			panel:setWorldPosition(x,y,z)			panel:setBounds(posx, posy, w, h)			panel:setBackground(tocolor(255,255,255,255))			panel:setForeground(tocolor(255,255,255,255))				local hud =  Phone.getInstance()			hud:setVisible(true)							panel:add(Phone.getInstance())			--[[			hud.sound = playSound("http://mfile.akamai.com/90687/live/reflector:42231.asx?bkup=42233&prop=e")			hud.spectrum:setSound(hud.sound)			hud.oldLen = nil			hud:updateSoundEffects()			hud.btPlay:setSource("gfx/metro/musicplayer/pause.png")			setSoundVolume(hud.sound,hud.volume/100)						]]			panel:setVisible(true)			panel:setZOrder(0)			Toolkit.getInstance():add(panel)						--hud:processContent("midia/eventos.html")			g_panel3d = panel					end    end);