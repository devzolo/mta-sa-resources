Class = {}setmetatable(Class, { __call = function(_, ...) return Class.extends(...) end })  function Class.extends(clazzName, superClazz, staticInit)	local classRef = {}	if(superClazz == nil) then		outputDebugString("Failed to build '" .. clazzName .. "' , invalid super.")		return	end	superClazz.__call = LuaObject.__call	setmetatable(classRef, superClazz)	classRef.__index = classRef	classRef.__parent = superClazz	classRef.name = clazzName		classRef.getSuperclass = function()		return classRef.__parent	end			local className = clazzName	local super = superClazz		function classRef:new()		local self = self or setmetatable({}, classRef)		super.new(self)		self.getClassName = function()			return className		end		return self	end			if(staticInit) then		setfenv(staticInit, setmetatable({def = classRef,class = classRef, static = classRef, super = superClazz}, { __index = _G })) 		staticInit()		end		_G[clazzName] = classRef	return classRefendfunction Class.getSingleton(className)	if(_G[className]) then		if(not _G[className].instance) then			_G[className].instance = _G[className]()		end		return _G[className].instance	end	return nilendfunction Class.forName(className)	local clazz = _G[className]	if(clazz) then		local parent  = clazz.getSuperclass()		while(parent ~= nil) do			if(parent == LuaObject) then				return clazz			end			parent  = parent.getSuperclass()		end	end	return falseend