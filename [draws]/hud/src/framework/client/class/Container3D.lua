local super = Class("Container3D", Container).getSuperclass()function Container3D:init()	super.init(self)		self:build3DShader() 		self.rotationX = 0	self.rotationY = 0	self.rotationZ = 0	self.rotationCenterOffsetX = 0	self.rotationCenterOffsetY = 0	self.rotationCenterOffsetZ = 0	self.bRotationCenterOffsetOriginIsScreen = true	self.perspectiveCenterOffsetX = 0	self.perspectiveCenterOffsetY = 0	self.bPerspectiveCenterOffsetOriginIsScreen = false		return selfendfunction Container3D:build3DShader() 	local tmpShader = "shader.fx"	local fileHandle = fileCreate(tmpShader) 	if fileHandle then                                		fileWrite(fileHandle, "texture rt; technique simple {pass P0 {Texture[0] = rt;}}")    		fileClose(fileHandle)                         		self.shader = dxCreateShader(tmpShader)		if(self.shader) then			self.rt = dxCreateRenderTarget(Graphics.getInstance():getWidth(), Graphics.getInstance():getHeight(), true)			dxSetShaderValue(self.shader, "rt", self.rt)		end		fileDelete(tmpShader)        	end		return self.shaderendfunction Container3D:paint(g)	local x, y = self:getLocationOnScreen()	local w = self.width	local h = self.height	if(self.rt) then		local screenX2 = g:getWidth()/2		if (x <= screenX2) then			screenX2 = -screenX2		end		local cx = ((x + w/2.0) - (g:getWidth() / 2.0)) / (g:getWidth()/2.0)   		local cy = (((y + h/2.0) - (g:getHeight() / 2.0)) * -1) / (g:getHeight()/2.0)		dxSetBlendMode("modulate_add")		--g:drawFilledRect(cx*g:getWidth(), cy*g:getHeight(), 10,10)		if(self.shader) then			dxSetShaderTransform(self.shader, 								 self.rotationX, self.rotationY, self.rotationZ, 								 cx + self.rotationCenterOffsetX, cy + self.rotationCenterOffsetY, self.rotationCenterOffsetZ, 								 self.bRotationCenterOffsetOriginIsScreen, 								 self.perspectiveCenterOffsetX, self.perspectiveCenterOffsetY, 								 self.bPerspectiveCenterOffsetOriginIsScreen)			dxSetRenderTarget(self.rt, true)		end		--dxSetShaderTessellation (self.shader, 16, 16 )	end	super.paint(self, g)	if(self.rt) then		dxSetRenderTarget()		if(self.shader) then			dxDrawImage(0, 0, g:getWidth(), g:getHeight(), self.shader,0,0,0, tocolor(255,255,255,255))		end	endendfunction Container3D:setRotationX(rotationX)	self.rotationX = rotationXendfunction Container3D:setRotationY(rotationY)	self.rotationY = rotationYendfunction Container3D:setRotationZ(rotationZ)	self.rotationZ = rotationZendfunction Container3D:getRotationX()	return self.rotationXendfunction Container3D:getRotationY()	return self.rotationYendfunction Container3D:getRotationZ()	return self.rotationZendfunction Container3D:setRotationCenterOffsetX(x)	self.rotationCenterOffsetX = xendfunction Container3D:setRotationCenterOffsetZ(y)	self.rotationCenterOffsetY = yendfunction Container3D:setRotationCenterOffsetZ(z)	self.rotationCenterOffsetX = zend