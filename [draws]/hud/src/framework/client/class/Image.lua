local super = Class("Image", Component, function()	static.DEFAULT_STYLE_CLASS = "image"end).getSuperclass()function Image:init()	super.init(self)	self.src = nil	self.color = tocolor(255,255,255,255)	self.angle = 0	self.rotOffsetX = 0	self.rotOffsetY = 0		self:addMouseListener(self)	return selfendfunction Image:setSource(src)	self.src = src	self.loading = falseendfunction Image:buildTexture()	if(type(self.src) == "string") then		if(fileExists(self.src)) then			self.src = dxCreateTexture(self.src)		end	endendfunction Image:getImageWidth()	self:buildTexture()	local w,h = dxGetMaterialSize(self.src)	return wendfunction Image:getImageHeight()	self:buildTexture()	local w,h = dxGetMaterialSize(self.src)	return hendfunction Image:getSource()	return self.srcendfunction Image:getColor()	return self.colorendfunction Image:setColor(color)	self.color = colorendfunction Image:setAngle(angle)	self.angle = angleendfunction Image:setRotationCenterOffsetX(rotOffsetX)	self.rotOffsetX = rotOffsetXendfunction Image:setRotationCenterOffsetY(rotOffsetY)	self.rotOffsetY = rotOffsetYendfunction Image:setRotationCenterOffset(rotOffsetX, rotOffsetY)	self.rotOffsetX = rotOffsetX	self.rotOffsetY = rotOffsetYendfunction Image:paintComponent(g)	local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()	g:drawSetColor(self.color)	if(self.loading) then		self.visibleTick = self.visibleTick or getTickCount()		if(getTickCount() - self.visibleTick > 32) then			self.frame = (self.frame or 0) + 1			if(self.frame > 75) then				self.frame = 0			end			self.visibleTick = getTickCount()		end			local size = math.min(32,math.min(w,h))		x = x + w/2 - size/2		y = y + h/2 - size/2		g:drawImageSection(x, y, size, size, (self.frame or 0) * 128, 0, 128, 128, ":hud/gfx/loading.png", 0, 0, 0)		self:getParent().valid = false	elseif(self.src) then		g:drawImage(x,y,w,h, self.src, self.angle, self.rotOffsetX, self.rotOffsetY)	end	super.paintComponent(self, g)endfunction Image:mousePressed(e)	self.armed = true	self.pressed = true	self:repaint()endfunction Image:mouseReleased(e)	self.pressed = false	self:fireActionPerformed()	self.armed = false	self:repaint()end------------ Image Button BEGIN--------------function Image:fireActionPerformed()	if (self.actionListener) then		if(self:isEnabled() and not self.pressed and self:isArmed()) then			self.actionListener:actionPerformed(ActionEvent(self:getSource(),ActionEvent.ACTION_PERFORMED, self:getActionCommand(),0,0))		end			endendfunction Image:setActionCommand(s) 	self.actionCommand = s	endfunction Image:getActionCommand() 	return self.actionCommandendfunction Image:addActionListener(l) 	if (l == nil) then		return	end	self.actionListener = EventMulticaster.add(self.actionListener, l)	endfunction Image:removeActionListener(l) 	if (l == nil) then		return	end	self.actionListener = EventMulticaster.remove(self.actionListener, l)	endfunction Image:getActionListeners()	return {self.actionListener}end------------ Image Button END--------------function Image:mouseEntered(e)	self.rollover = true	self:repaint()endfunction Image:mouseExited(e)	self.rollover = false	self.armed = false	self:repaint()endfunction Image:isArmed()	return self.armedendfunction Image:isRollover()	return self.rolloverendfunction Image:setEnabled(enabled)	super.setEnabled(self, enabled)	self:repaint()endfunction Image:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			elseif(self:isArmed()) then				styleState = ":active"			elseif(self:isRollover()) then				styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style[Image.DEFAULT_STYLE_CLASS .. styleState]			local classStyle = self:getStyleClass() and style["." .. self:getStyleClass() .. styleState]						local backgroundColor = (idStyle and idStyle._style["background-color"]) 								 or (classStyle and classStyle._style["background-color"])								 or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self.backgroundColor = tocolor(getColorFromString(backgroundColor))			end							local color = (idStyle and idStyle._style["color"]) 					   or (classStyle and classStyle._style["color"])					   or (typeStyle and typeStyle._style["color"])					   			if(color) then				self.color = tocolor(getColorFromString(color))				end						local fontSize = (idStyle and idStyle._style["font-size"]) 						  or (classStyle and classStyle._style["font-size"])						  or (typeStyle and typeStyle._style["font-size"])			if(fontSize) then				local metric = string.match(fontSize, "%a+")								if(metric == "em") then					local size = string.match(fontSize, "[%d%.]+")					--self:setScale(tonumber(size))				else									end			end							if(self.border) then				local border = (idStyle and idStyle._style["border"]) 							or (classStyle and classStyle._style["border"])							or (typeStyle and typeStyle._style["border"])				if(border) then					if(border == "0") then						self.border = nil					else						self.border = BorderFactory.createLineBorder(tocolor(0,0,0), tonumber(border) or 1)					end				end			end						end		--self:setText(self:getLabel())	endend