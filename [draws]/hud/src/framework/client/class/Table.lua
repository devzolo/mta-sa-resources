-------------------------------------- TableColumn Begin--------------------------------------------local super = Class("TableColumn", Panel).getSuperclass()function TableColumn:init()	super.init(self)	self:addMouseListener(self)	return selfendfunction TableColumn:addNotify() 	if(self.content and self.content.tableGlue) then		self.content:tableGlue(self.parent)	endendfunction TableColumn:setContent(content)	if(type(content) == "string") then		local label = Label()		label:setForeground(tocolor(255,255,255))		label:setBackground(tocolor(0,0,0))		label:setScale(1)		label:setText(content)		label:setAlignment(Label.CENTER)		label:setLocation(0,0)		label:setSize(self:getSize())		label.decorator = true		self.label = label		self:add(label)	elseif(type(content) == "table" and instanceOf(content, Component)) then		content:setLocation(0,0)		content:setSize(self:getSize())			self.content = content		self:add(content)	endendfunction TableColumn:getLabel()	return self.labelendfunction TableColumn:addClickHandler(clickHandler, object)	self.clickHandler = clickHandler	self.object = objectendfunction TableColumn:mousePressed(e)	if(self.clickHandler) then		self.clickHandler(self.object)	endendfunction TableColumn:mouseEntered(e)	self.rollover = true	self:repaint()endfunction TableColumn:mouseExited(e)	self.rollover = false	self:repaint()endfunction TableColumn:isRollover()	return self.rolloverendfunction TableColumn:setEnabled(enabled)	super.setEnabled(self, enabled)	self:repaint()endfunction TableColumn:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			elseif(self:isRollover()) then				styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style["th" .. styleState]						local backgroundColor = (idStyle and idStyle._style["background-color"]) or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self:setBackground(tocolor(getColorFromString(backgroundColor)))			end							if(self.label) then					local color= (idStyle and idStyle._style["color"]) or (typeStyle and typeStyle._style["color"])				if(color) then					self.label:setForeground(tocolor(getColorFromString(color)))					end							local textAlign= (idStyle and idStyle._style["text-align"]) or (typeStyle and typeStyle._style["text-align"])				if(textAlign) then					self.label:setAlignment(getAlignByStr(textAlign))								end			end						if(self.border) then				local border = (idStyle and idStyle._style["border"]) or (typeStyle and typeStyle._style["border"])				if(border) then					if(border == "0") then						self.border = nil					else						self.border = BorderFactory.createLineBorder(tocolor(0,0,0), tonumber(border) or 1)					end				end			end				end	endend-------------------------------------- TableColumn End------------------------------------------------------------------------------------- TableRow Begin--------------------------------------------local super = Class("TableRow", Panel).getSuperclass()function TableRow:init()	super.init(self)	self.data = {}	self:addMouseListener(self)	self:setZOrder(1)	return selfendfunction TableRow:setColuns(coluns)	self.coluns = colunsendfunction TableRow:addClickHandler(clickHandler, object)	self.clickHandler = clickHandler	self.object = objectendfunction TableRow:addNotify()	if(self.parent and self.parent.rowAddNotify) then		self.parent:rowAddNotify(self)	end	super.addNotify(self)endfunction TableRow:mousePressed(e)	if(self.parent and self.parent.rowMousePressed) then		self.parent:rowMousePressed(e)	end	if(self.clickHandler) then		self.clickHandler(self.object)	endendfunction TableRow:mouseEntered(e)	if(self.parent and self.parent.rowMouseEntered) then		self.parent:rowMouseEntered(e)	end	self.rollover = true	self:repaint()endfunction TableRow:mouseExited(e)	if(self.parent and self.parent.rowMouseExited) then		self.parent:rowMouseExited(e)	end		self.rollover = false	self:repaint()endfunction TableRow:isRollover()	return self.rolloverendfunction TableRow:setEnabled(enabled)	super.setEnabled(self, enabled)	self:repaint()endfunction getAlignByStr(str)	if(str == 'left') then		return Label.LEFT	elseif(str == 'right') then		return Label.RIGHT	else		return Label.CENTER	endendfunction TableRow:setContent(data)	if(self.coluns and data) then		local px = 0		for k,v in pairs(data) do			if(type(v) == "string") then				self.label = Label()				self.label:setForeground(tocolor(255,255,255))				self.label:setBackground(self:getBackground())				self.label:setScale(1)				self.label:setText(v)				self.label:setAlignment(getAlignByStr(self.coluns[k].align))				self.label:setBounds(px, 0,self.coluns[k].w, self:getHeight())				self.label.ignoreEvents = true				self.label.decorator = true				self:add(self.label)				self.data[k] = self.label				px = px + self.coluns[k].w			elseif(type(v) == "table" and instanceOf(v, Component)) then				v.index = self.index				v:setLocation(0,0)				v:setSize(self:getSize())					self.data[k] = v				self:add(v)			end		end	endendfunction TableRow:setData(data)	if(self.coluns and data) then		local px = 0		for k,v in pairs(data) do			self.label = Label()			self.label:setForeground(tocolor(255,255,255))			self.label:setBackground(self:getBackground())			self.label:setScale(1)			self.label:setText(v)			self.label:setAlignment(getAlignByStr(self.coluns[k].align))			self.label:setBounds(px, 0,self.coluns[k].w, self:getHeight())			self.label.ignoreEvents = true			self.label.decorator = true			self:add(self.label)			self.data[k] = self.label			px = px + self.coluns[k].w		end	endendfunction TableRow:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			elseif(self:isRollover()) then				styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style["td" .. styleState]						local backgroundColor = (idStyle and idStyle._style["background-color"]) or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self:setBackground(tocolor(getColorFromString(backgroundColor)))			end							if(self.label) then					local color= (idStyle and idStyle._style["color"]) or (typeStyle and typeStyle._style["color"])				if(color) then					--self.label:setForeground(tocolor(getColorFromString(color)))					local tdColor = tocolor(getColorFromString(color))					if(color and self.data) then						for k,v in pairs(self.data) do							if(v.setForeground) then								v:setForeground(tdColor)							end						end					end				end							local textAlign= (idStyle and idStyle._style["text-align"]) or (typeStyle and typeStyle._style["text-align"])				if(textAlign) then					self.label:setAlignment(getAlignByStr(textAlign))								end			end						if(self.border) then				local border = (idStyle and idStyle._style["border"]) or (typeStyle and typeStyle._style["border"])				if(border) then					if(border == "0") then						self.border = nil					else						self.border = BorderFactory.createLineBorder(tocolor(0,0,0), tonumber(border) or 1)					end				end			end				end	endend----------------------------------------- TableRow End----------------------------------------------local super = Class("Table", Container).getSuperclass()function Table:init()	super.init(self)		self.columnHeight = 20	self.padHeight = 4	self.dataHeight = 20		self.position = 1	self.columnNames = {}	self.rowData = {}	self.rowObject = {}	self.rowClickHandler = {}	self.rows = {}		self.scroll = Scrollbar(Scrollbar.VERTICAL)	self.scroll:setBackground(tocolor(100,100,100,200))	self.scroll:setForeground(tocolor(0,0,0,200))		self.scroll:addAdjustmentListener(self)	self.scroll:setVisible(true)	self.scroll:setZOrder(100)		self:add(self.scroll)			self.border = BorderFactory.createLineBorder(tocolor(0,0,0), 1)		self:addMouseWheelListener(self)	return selfend	function Table:setBounds(x,y,w,h)	local sposX = self.columnHeight + self.padHeight	self.scroll:setBounds(w - 12, sposX, 12, h - sposX)		super.setBounds(self, x,y,w,h)endfunction Table:paintComponent(g)	local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()	g:drawSetColor(self:getBackground())	g:drawFilledRect(x + 1, y + 1, w - 1, h - 1)	super.paintComponent(self, g)endfunction Table:getRowCount()	return #self.rowDataendfunction Table:getColumnCount()	return #self.columnNamesendfunction Table:getColumnName(column)	return self.columnNames[column]endfunction Table:getColumnClass(col)endfunction Table:isCellEditable(row, col)	return trueendfunction Table:getValueAt(row, col)	return self.rowData[row][col]endfunction Table:setValueAt(value, row, col)	self.rowData[row][col] = valueendfunction Table:addRow(index, data, object, handler)	self.rowData[index] = data	self.rowObject[index] = object	self.rowClickHandler[index] = handler	if(index <= self.position + self:getMaxPosition()) then		self:update(self.position)	end	self.scroll:setValues(self:getRowCount()-self:getMaxPosition(), 0, 0, self:getRowCount()-self:getMaxPosition())		if(self.rowDataAddNotify) then		self:rowDataAddNotify(self, index)	endendfunction Table:removeRow(index)	self.rowData[index] = nil	self.rowObject[index] = nilendfunction Table:getMaxPosition()	local pos = 1	while true do		if(pos*(self.dataHeight+self.padHeight)+(self.dataHeight+self.padHeight) <= self:getHeight()) then			pos = pos + 1		else			pos = pos - 2			break		end	end	return posendfunction Table:clear()	for k,v in pairs(self.rows) do		self:remove(v)	end	self.rows = {}	self.rowData = {}	self.rowObject = {}	self.rowClickHandler = {}	self.position = 1	self.scroll:setValues(self:getRowCount()-self:getMaxPosition(), 0, 0, self:getRowCount()-self:getMaxPosition())	self:update()	self.position = 1	self:update()endfunction Table:addTableRow(pos, index)	if(pos*(self.dataHeight+self.padHeight)+(self.dataHeight+self.padHeight) <= self:getHeight()) then		local row = TableRow()		row.index = index 		row:setBackground(tocolor(100,100,100,158))		row:setForeground(tocolor(0,0,0))		row:setBounds(1,pos*(self.dataHeight+self.padHeight),self:getWidth() - self.scroll:getWidth() - 2,self.dataHeight)		row:setColuns(self.columns)		--row:setData(self.rowData[index])		row:setContent(self.rowData[index])		row:setZOrder(2)		row:addMouseWheelListener(self)		self:add(row)				self.rows[pos] = row		if(self.rowClickHandler[index]) then			row:addClickHandler(self.rowClickHandler[index], self.rowObject[index])		end		return true	end	return falseendfunction Table:setPosition(position)	if(self.position ~= position) then		self.position = position		self:update()	endendfunction Table:update()	for k,v in pairs(self.rows) do		self:remove(v)	end		local pad = 4	local pos = 1	local index = self.position		for k,v in pairs(self.rowData) do		if(self.rowData[index]) then			if(not self:addTableRow(pos, index)) then				break			end				pos = pos + 1				end		index = index + 1		end	--while self.rowData[index] do	--	if(not self:addTableRow(pos, index)) then	--		break	--	end		--	index = index + 1	--	pos = pos + 1	--endendfunction Table:setRowHeight(rowHeight)	if (rowHeight <= 0) then		outputDdebugString("New row height less than 1");	end	local old = self.rowHeight	self.rowHeight = rowHeightendfunction Table:getRowHeight()	return self.rowHeight;endfunction Table:setColumnNames(columnNames)	self.columnNames = columnNames	local columnw = self:getWidth()/#self.columnNames	if(self.columnHeader) then		for k,v in pairs(self.columnHeader) do			self:remove(v)		end	end	self.columnHeader = {}	for k,v in pairs(self.columnNames) do		local column = TableColumn()		column:setSize(0, 0)			column:setLocation(columnw * k - (columnw/2), 0)		column:setForeground(tocolor(255,255,255))		column:setBackground(tocolor(0,0,0))		column:setContent(v)		self:add(column)		self.columnHeader[k] = column	endendfunction Table:setColumns(columns)	self.columns = columns	self.columnNames = {}	for k,v in pairs(columns) do		self.columnNames[k] = v.name	end	if(self.columnHeader) then		for k,v in pairs(self.columnHeader) do			self:remove(v)		end	end	self.columnHeader = {}	local px = 0	for k,v in pairs(columns) do		local column = TableColumn()		column:setLocation(px,0)		column:setSize(v.w, self.columnHeight)		column:setForeground(tocolor(255,255,255))		column:setBackground(tocolor(0,0,0))		if(v.onclick) then			column:addClickHandler(v.onclick, v.data)		end			column:setContent(v.name)		column:add(label)		self:add(column)				self.columnHeader[k] = column		px = px + v.w	endendfunction Table:addTableListener(l)endfunction Table:removeTableListener(l)endfunction Table:processEvent(e)	if (instanceOf(e, ActionEvent)) then		outputDebugString('Table:ActionEvent')		self:processActionEvent(e)		return	end	super.processEvent(self, e);endfunction Table:processActionEvent(e)	outputDebugString('Table:processActionEvent')	if(e:getSource() == self) then		KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(self)	end    local listener = self.actionListener    if (listener) then        listener:actionPerformed(e)    endendfunction Table:mouseClicked(e)endfunction Table:mousePressed(e)	self:processEvent(ActionEvent.new(self,ActionEvent.ACTION_PERFORMED,"ACTION_PERFORMED",0,0))	KeyboardFocusManager.getCurrentKeyboardFocusManager():setGlobalFocusOwner(self)endfunction Table:mouseReleased(e)endfunction Table:mouseEntered(e)	self.rollover = true	self:repaint()endfunction Table:mouseExited(e)	self.rollover = false	self:repaint()endfunction Table:adjustmentValueChanged(e)	self:setPosition(self:getRowCount()-self:getMaxPosition()-e.value)	--self.content:setViewY( - (self.scroll:getMaximum() - self.scroll:getVisibleAmount())  + e.value)endfunction Table:mouseWheelMoved(e)	self.scroll:setValue(self.scroll:getValue()+ (self.scroll:getUnitIncrement() * e:getScrollAmount()))endfunction Table:isRollover()	return self.rolloverendfunction Table:setEnabled(enabled)	super.setEnabled(self, enabled)	self:repaint()endfunction Table:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			elseif(self:isRollover()) then				styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style["table" .. styleState]						local backgroundColor = (idStyle and idStyle._style["background-color"]) or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self:setBackground(tocolor(getColorFromString(backgroundColor)))			end							local color= (idStyle and idStyle._style["color"]) or (typeStyle and typeStyle._style["color"])			if(color) then				self:setForeground(tocolor(getColorFromString(color)))				end									--local typeStyleTH = style["th" .. styleState]					end	endend