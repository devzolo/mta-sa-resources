local super = Class("Canvas", Container).getSuperclass()Canvas.nameCounter = 0function Canvas:init(targetWidth, targetHeight)	super.init(self)	self:setTargetSize(targetWidth, targetHeight)	return selfendfunction Canvas:setTargetSize(targetWidth, targetHeight)	if(targetWidth == nil) then		targetWidth = Graphics.getInstance():getWidth()	end	if(targetHeight == nil) then		targetHeight = Graphics.getInstance():getHeight()	end	self.targetWidth, self.targetHeight = targetWidth, targetHeight	if(self.renderTarget) then		destroyElement(self.renderTarget)	end	self.renderTarget = dxCreateRenderTarget(targetWidth, targetHeight)endfunction Canvas:setActionCommand(command)    self.actionCommand = commandendfunction Canvas:getActionCommand()    return self.actionCommandendfunction Canvas:addActionListener(l)	if (not l) then		return	end	self.actionListener = lendfunction Canvas:removeActionListener(l)	if (not l) then		return	end	self.actionListener = nilendfunction Canvas:addNotify()endfunction Canvas:removeNotify()endfunction Canvas:paint(g)	local x, y = self:getLocationOnScreen()	local w = self.width	local h = self.height		if self.renderTarget then		dxSetRenderTarget(self.renderTarget, true)		--g:drawSetColor(self:getBackground())		--g:drawFilledRect(0, 0, self.targetWidth, self.targetHeight)		super.paint(self, g)		dxSetRenderTarget()		dxDrawImage(x, y, w, h, self.renderTarget)	endendfunction Canvas:processEvent(e)	if (instanceOf(e, ActionEvent)) then		self:processActionEvent(e)		return	end	super.processEvent(self, e);endfunction Canvas:processActionEvent(e)	local listener = self.actionListener	if (listener ~= nil) then		listener.actionPerformed(e)	endendfunction Canvas:mouseClicked(e)endfunction Canvas:mousePressed(e)	self:processEvent(ActionEvent(self,ActionEvent.ACTION_PERFORMED,"ACTION_PERFORMED",0,0))	if(e.button == MouseEvent.BUTTON1) then	end	if(e.button == MouseEvent.BUTTON2) then	end	if(e.button == MouseEvent.BUTTON3) then			endendfunction Canvas:mouseReleased(e)	if(e.button == MouseEvent.BUTTON1) then	end	if(e.button == MouseEvent.BUTTON2) then	endendfunction Canvas:mouseEntered(e)	--self:setBackground(tocolor(255, 255, 255, 223))	--self:setForeground(tocolor(0, 0, 0, 255))endfunction Canvas:mouseExited(e)	--self:setBackground(tocolor(255, 255, 255, 223))	--self:setForeground(tocolor(0, 0, 0, 255))endfunction Canvas:mouseMoved(e)end