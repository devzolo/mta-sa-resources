local super = Class("Button", AbstractButton, function()	static.DEFAULT_STYLE_CLASS = "button"end).getSuperclass()Button.nameCounter = 0 function Button:init(label)	super.init(self)	self.font = "default-bold"	self.scale = 1	self.parts = {}		self.alignment = Label.CENTER	self.textcolor = tocolor(255,255,255)	self.label = label	self:setText(self.label)	self.actionListener = nil	self:addMouseListener(self)	self:setBackground(197, 234, 244, 223)	self:setForeground(31, 40, 50, 223)	self.border = BorderFactory.createLineBorder(tocolor(0,0,0), 1)	self:setModel(DefaultButtonModel())	return selfendfunction Button:getModel()	return self.modelendfunction Button:setModel(newModel)	local oldModel = self:getModel()	if (oldModel ~= nil) then		oldModel:removeChangeListener(self)		oldModel:removeActionListener(self)		oldModel:removeItemListener(self)	end		self.model = newModel	if (newModel ~= nil) then		self.model:setSource(self)		self.model:addChangeListener(self)			self.model:addActionListener(self)			self.model:addItemListener(self)			endendfunction Button:getLabel()	return self.labelendfunction Button:setLabel(label)	self.label = labelendfunction Button:setActionCommand(command)    self.model:setActionCommand(command)endfunction Button:getActionCommand()	return self.model:getActionCommand()endfunction Button:addActionListener(l)	self.model:addActionListener(l)endfunction Button:actionPerformed(e)	--nopendfunction Button:removeActionListener(l)	self.model:removeActionListener(l)endfunction Button:addNotify()	self:repaint()endfunction Button:removeNotify()endfunction Button:paintComponent(g)	local x, y = self:getLocationOnScreen()	local w = self:getWidth()	local h = self:getHeight()		g:drawSetColor(self:getBackground())	g:drawFilledRect(x, y, w, h)	g:drawSetTextScale(self:getScale())	local fx,fy = self.fx,self.fy	g:drawSetTextFont(self.font)	if(self.alignment == Label.LEFT) then		x = x + 2	elseif(self.alignment == Label.CENTER) then		x = x-fx/2+w/2	elseif(self.alignment == Label.RIGHT) then		x = x-fx+w - 2	end	local px,py = x, y-fy/2+h/2	for i,part in pairs(self.parts) do		--self:drawBorder(g, part.text, self:getTextColor(),  px+part.x, py+part.y, self.border)		--self:drawShadow(part.text, px+part.x, py+part.y, self:getTextColor(), self.scale, self.font, 1, self.width)		--g:drawSetTextPos(px+part.x+1, py+part.y+1)		--g:drawSetTextColor(self:getTextColor())		--g:drawPrintText(part.text,0)		g:drawSetTextPos(px+part.x, py+part.y)		g:drawSetTextColor(part.color)		g:drawPrintText(part.text,0)	endendfunction Button:processEvent(e)	if (instanceOf(e, ActionEvent)) then		self:processActionEvent(e)		return	end	super.processEvent(self, e);endfunction Button:processActionEvent(e)	local listener = self.actionListener	if (listener ~= nil) then		listener.actionPerformed(e)	endendfunction Button:mouseClicked(e)endfunction Button:mousePressed(e)	self.model:setArmed(true)	self.model:setPressed(true)	--self:processEvent(ActionEvent(self,ActionEvent.ACTION_PERFORMED,"ACTION_PERFORMED",0,0))endfunction Button:mouseReleased(e)	self.model:setPressed(false)	self.model:setArmed(false)endfunction Button:mouseEntered(e)	self.model:setRollover(true)endfunction Button:mouseExited(e)	self.model:setRollover(false)	self.model:setArmed(false)endfunction Button:getTextColor()	if (self.textcolor ~= nil) then		return self.textcolor or self:getForeground()	elseif(self.parent ~= nil) then		return self.parent:getForeground()	end	return nilendfunction Button:setTextColor(color)	self.textcolor = colorendfunction Button:setText(text)	self.text = text	self.parts = {}	if(self.text) then		local curX, curY = 0, 0		local color = self:getForeground() --self:getTextColor()		local colorpos = 1		local nextcolorpos		while colorpos < text:len()+1 do			local r, g, b = text:sub(colorpos, colorpos+6):match('#(%x%x)(%x%x)(%x%x)')			if r then				color = tocolor(tonumber(r, 16), tonumber(g, 16), tonumber(b, 16))				colorpos = colorpos + 7			end			nextcolorpos = text:find('#%x%x%x%x%x%x', colorpos) or text:len() + 1			local part = { text = text:sub(colorpos, nextcolorpos - 1), x = curX, y = curY, color = color }			table.insert(self.parts, part)			curX = curX + dxGetTextWidth(part.text, self.scale, self.font)			colorpos = nextcolorpos		end		-----------		local txtnc = string.gsub(self.text, "(#%x%x%x%x%x%x)", function(colorString) return "" end)		--self:setSize(dxGetTextWidth(txtnc, self.scale, self.font),dxGetFontHeight(self.scale, self.font))		local g = Graphics.getInstance()		g:drawSetTextScale(self:getScale())		self.fx,self.fy = g:getTextSize(self.font,txtnc)	endendfunction Button:getText()	return self.textendfunction Button:getScale()	return self.scaleendfunction Button:setScale(scale)	self.scale = scale	self:setText(self.text)endfunction Button:getFont()	return self.fontendfunction Button:setFont(font)	self.font = font	self:setText(self.text)endfunction Button:drawBorder(g, text, color, x, y, outlinesize)	if outlinesize > 0 then		g:drawSetTextColor(color)		for offsetX=-outlinesize,outlinesize,outlinesize do			for offsetY=-outlinesize,outlinesize,outlinesize do				if not (offsetX == 0 and offsetY == 0) then					g:drawSetTextPos(x + offsetX, y + offsetY)					g:drawPrintText(text,0)				end			end		end	endendfunction Button:drawShadow(text, x, y, color, scale, font, shadowDist, width, align)	shadowDist = shadowDist or 1	local alpha = math.floor(color / 16777216)	dxDrawText(text, x + shadowDist, y + shadowDist, x + shadowDist + (width or 0), 0, tocolor(0, 0, 0, alpha), scale or 1, font or 'default', width and (align or 'center') or 'left')	dxDrawText(text, x, y, x + (width or 0), 0, color, scale or 1, font or 'default', width and (align or 'center') or 'left')endfunction Button:stateChanged(e)    local src = e:getSource()	--self:updateMnemonicProperties();	if (self:isEnabled() ~= self.model:isEnabled()) then		self:setEnabled(self.model:isEnabled())	end	--self:fireStateChanged()	self:repaint()endfunction Button:isEnabled()	return self.model:isEnabled()endfunction Button:isArmed()	return self.model:isArmed()endfunction Button:isRollover()	return self.model:isRollover()endfunction Button:updateUI()	local stylesheet = self:getStylesheet()	if(stylesheet) then		local style = stylesheet and stylesheet.style		if(style) then					local styleState = ""						if(not self:isEnabled()) then				styleState = ":disabled"			elseif(self:isArmed()) then				styleState = ":active"			elseif(self:isRollover()) then				styleState = ":hover"						elseif(self:isFocusOwner()) then				styleState = ":focus"						end						local idStyle = style["#" .. self:getId() .. styleState]			local typeStyle = style[Button.DEFAULT_STYLE_CLASS .. styleState]			local classStyle = self:getStyleClass() and style["." .. self:getStyleClass() .. styleState]							local backgroundColor = (idStyle and idStyle._style["background-color"]) 								 or (classStyle and classStyle._style["background-color"])								 or (typeStyle and typeStyle._style["background-color"])			if(backgroundColor) then				self:setBackground(backgroundColor)			end							local color = (idStyle and idStyle._style["color"]) 					   or (classStyle and classStyle._style["color"])					   or (typeStyle and typeStyle._style["color"])					   			if(color) then				self:setForeground(color)			end						local fontSize = (idStyle and idStyle._style["font-size"]) 						  or (classStyle and classStyle._style["font-size"])						  or (typeStyle and typeStyle._style["font-size"])			if(fontSize) then				local metric = string.match(fontSize, "%a+")								if(metric == "em") then					local size = string.match(fontSize, "[%d%.]+")					self:setScale(tonumber(size))				else									end			end							if(self.border) then				local border = (idStyle and idStyle._style["border"]) 							or (classStyle and classStyle._style["border"])							or (typeStyle and typeStyle._style["border"])				if(border) then					if(border == "0") then						self.border = nil					else						self.border = BorderFactory.createLineBorder(tocolor(0,0,0), tonumber(border) or 1)					end				end			end						end		self:setText(self:getLabel())	endend